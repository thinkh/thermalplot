version: 2
jobs:
  build:
    working_directory: ~/phovea
    docker:
      - image: caleydo/phovea_circleci_python:v1.0
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - run:
          name: Install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get update
            sudo apt-get install -y git-lfs openssh-client
            git lfs install
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download
            git lfs pull
      - run:
          name: Check *.db files pulled from Git LFS
          command: |
            find . -type f -name '*.db' -printf "%p\t%k KB\n"
      - setup_remote_docker
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: deps2-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - restore_cache:
          key: awscli-1.11.113
      - run:
          name: install-aws-cli
          command: |
            virtualenv ~/venv
            . ~/venv/bin/activate
            pip install awscli==1.11.113
      - save_cache:
          key: awscli-1.11.113
          paths:
          - ~/venv
      - run:
          name: build-application
          command: |
            npm run build
      - run:
          name: login ecr and docker hub
          command: |
            . ~/venv/bin/activate
            cat > ~/.dockercfg << EOF
            {
              "https://index.docker.io/v1/": {
                "auth": "$DOCKER_AUTH",
                "email": "$DOCKER_EMAIL"
              }
            }
            EOF
            export AWS_DEFAULT_REGION=eu-central-1
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - deploy:
          name: build and deploy
          command: |
            . ~/venv/bin/activate
            case $CIRCLE_BRANCH in
            master)
              awsTag="latest"
              ;;
            *)
              awsTag="${CIRCLE_BRANCH}"
              ;;
            esac
            echo "using tag: --${awsTag}--"
            image="922145058410.dkr.ecr.eu-central-1.amazonaws.com/thermalplot:${awsTag}"
            docker build -t ${image} .
            docker push ${image}
      - deploy:
          name: cleanup untagged aws repo
          command: |
            . ~/venv/bin/activate
            export AWS_DEFAULT_REGION=eu-central-1
            # list repos filter to just the one of this product and delete untagged ones
            aws ecr list-images --repository-name thermalplot --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output text | while read imageId; do aws ecr batch-delete-image --output text --repository-name thermalplot --image-ids imageDigest=$imageId; done
      - deploy:
          name: restart aws #assumes the task definition is called <reponame>-<branch>
          command: |
            . ~/venv/bin/activate
            export AWS_DEFAULT_REGION=eu-central-1
            # cleanup name by removing the _product suffix
            baseName=${CIRCLE_PROJECT_REPONAME%_product}
            awsFamily="${baseName}-${CIRCLE_BRANCH}"
            echo "awsFamily --${awsFamily}--"
            tasksExists=$(aws --output text ecs list-task-definitions --family-prefix ${awsFamily})
            echo "existsTaskDefinition? --${tasksExists}--"
            if [ ! -z "$tasksExists" ]; then
              isTaskRunning=$(aws --output text ecs list-tasks --cluster caleydo --family ${awsFamily})
              echo "isTaskRunning? --${isTaskRunning}--"
              if [ ! -z "$isTaskRunning" ]; then
                taskId=$(echo "${isTaskRunning}" | cut -f2)
                echo "taskId--${taskId}--"
                aws --output text ecs stop-task --cluster caleydo --task ${taskId}
              fi
              aws --output text ecs run-task --cluster caleydo --task-definition ${awsFamily} --started-by CircleCIAutoUpdate
            fi
