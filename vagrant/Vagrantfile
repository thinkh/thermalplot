# -*- mode: ruby -*-
# vi: set ft=ruby :

box		 = 'ubuntu/trusty32'
hostname = 'thermalplot'
ip		 = '192.168.42.42'
ram		 = '512'
cpu		 = '2'

is_windows = (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/)

$rootScript = <<SCRIPT
	echo "I am provisioning..."
	echo doing it as $USER
	cd /home/vagrant
	add-apt-repository ppa:git-core/ppa
	apt-get update
	apt-get install -y vim git-core curl python-dev python-pip
	wget https://bootstrap.pypa.io/ez_setup.py -O - | python
SCRIPT

$userScript = <<SCRIPT
	cd /home/vagrant
	wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh
	export NVM_DIR="/home/vagrant/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"	# This loads nvm
	nvm install 5.10.1
	nvm alias default 5.10.1
SCRIPT

$infoScript = <<SCRIPT
	echo "-----------------------------"
	echo "To finish provisioning of the box run the following commands:"
	echo "1) vagrant ssh"
	echo "2) cd /vagrant/"
	echo "3) Running on vagrant on..."
	echo "   Windows --> sh provision.sh true"
	echo "   Linux/Mac --> sh provision.sh false"
	echo "Wait until provisioning process has finished."
	echo "-----------------------------"
SCRIPT

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

	config.vm.box = box
	config.vm.hostname = hostname

	config.vm.network "private_network", ip: "192.168.56.101"
	config.vm.network "forwarded_port", guest: 22, host: 9149
	config.vm.network "forwarded_port", guest: 8888, host: 8888 # from "tornado server.py"

	config.ssh.forward_agent = true

	config.vm.synced_folder ".", "/vagrant",
		owner: "vagrant", group: "vagrant"
		
	config.vm.synced_folder "../", "/var/root/", id: "root", :nfs => false
	config.vm.synced_folder "../server", "/var/server", id: "server", :nfs => false
	config.vm.synced_folder "../client", "/var/client", id: "client", :nfs => false

	# Removes "stdin: is not a tty" annoyance as per
	# https://github.com/SocialGeeks/vagrant-openstack/commit/d3ea0695e64ea2e905a67c1b7e12d794a1a29b97
	config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

	config.vm.provider "virtualbox" do |vb|
		vb.customize	[
							"modifyvm", :id,
							"--memory", ram,
							"--cpus", cpu,
						]

		# Enable symlinks in vagrant shared folder (e.g. for nvm)
		# @see https://coderwall.com/p/b5mu2w
		# @see http://blog.liip.ch/archive/2012/07/25/vagrant-and-node-js-quick-tip.html
		vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
		vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant-root", "1"]
		vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant", "1"]
		vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/server", "1"]
		vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/client", "1"]
	end

	# Shell provisioning.
	config.vm.provision "shell", inline: $rootScript
	config.vm.provision "shell", inline: $userScript, privileged: false
	
	# automatical provisioning does not work at the moment
	# so we leave a message to the user
	config.vm.provision "shell", inline: $infoScript, privileged: false
	
	# the provision
	#
	#if is_windows
	#	config.vm.provision "shell", path: "provision_global.sh", :args => "true" # == is_windows
	#else
	#	config.vm.provision "shell", path: "provision_global.sh", :args => "false" # == is_windows
	#end

end